pipeline {
    agent any

    environment {
        FLASK_APP = 'src/api.py'
        FLASK_ENV = 'development'
        PYTHONPATH = "${WORKSPACE}/src"
    }

    stages {
        stage('Get Code') {
            steps {
                git branch: 'master', url: 'https://github.com/FoxMateo/Caso-practico-1D.git'
                sh 'ls -la'
            }
        }

        stage('Flake8') {
            steps {
                sh '''
                    flake8 --exit-zero --format=pylint src > flake8.out
                '''   
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],
                             qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }

        stage('Security') {
            steps {
                sh '''
                    bandit --exit-zero -r src -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues tools: [bandit(name: 'Bandit', pattern: 'bandit.out')],
                             qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
            }
        }        
        
        stage('Unit') {
            steps {
                sh '''
                    pytest --junitxml=result-unit.xml --cov=src --cov-report=xml:coverage.xml test/unit
                '''
                junit 'result-unit.xml'
            }
        }

        stage('Rest') {
            steps {
                sh '''
                    export FLASK_APP=src/api.py
                    nohup flask run --host=0.0.0.0 --port=5001 &
                    sleep 15
                    pytest --junitxml=result-rest.xml test/rest
                '''
                junit 'result-rest.xml'
            }    
        }

        stage('Cobertura') {
            steps {
                sh '''
                    coverage xml
                '''
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    cobertura coberturaReportFile: 'coverage.xml',
                              conditionalCoverageTargets: '100,0,80',
                              lineCoverageTargets: '100,0,85',
                              onlyStable: false,
                              failUnstable: false
                }
            }
        }

        stage('Performance') {
            steps {
                sh '''
                    nohup flask run --host=0.0.0.0 --port=5000 &
                    sleep 15
                    jmeter -n -t test/jmeter/flask.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }  
    }

    post {
        always {
            sh 'pkill -f "flask run" || true'
        }
    }
}
